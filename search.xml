<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>读《你不知道的JavaScript(上卷)》</title>
    <url>/archives/3dacf7de.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录阅读《你不知道的JavaScript（上卷）》的一些笔记，主要内容为作用域和闭包、this和原型对象。</p><a id="more"></a><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><h3 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域"></a>什么是作用域</h3><p><strong>作用域</strong> 用一套设计好的规则来存储变量，并在之后能够方便的找到这些变量，这套规则称之为作用域。</p><p><strong><code>JavaScript</code>的工作原理</strong></p><ul><li><code>JavaScript</code>引擎：从头到尾负责整个 <code>JavaScript</code> 程序的编译及执行过程</li><li><code>JavaScript</code>编译器：负责语法分析及代码生成等<ol><li>分词/词法分析(Tokenizing/Lexing)：这个过程会将字符代码分解为有意义的代码块，这些代码块称为词法单元(token)。例如：<code>var a = 2;</code> , 这段程序会被分解为 <code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>、<code>;</code>。</li><li>语法分析(Parsing)：这个过程是将词法单元流转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个数被称为“抽线语法树”(Abstract Syntax Tree, AST)。</li><li>代码生成()：将 <code>AST</code> 转换为可执行代码，简单来说就是有某种方法可以将 <code>var a = 2;</code> 的 <code>AST</code> 转换为一组机器指令，用来创建一个叫作 <code>a</code> 的变量(包括分配内存等)，并将一个值存储在 <code>a</code> 中。</li></ol></li><li><code>JavaScript</code>作用域：负责收集并维护由所有声明的标识符(变量)组成的一系列查询</li></ul><p><strong>作用域查询规则</strong></p><ul><li>LHS查询(Left Handle Search)：查找的目的是对变量进行赋值会触发（赋值操作的目标是谁，我要赋值了）</li><li>RHS查询(Right Handle Search)：查找的目的是获取变量的值会触发（谁是赋值操作的源头，我要用它）<ul><li>其查询规则为嵌套查询，也就是在当前作用域中没有查找到，引擎就会在外层嵌套中继续查找，直到最外层(全局作用域)为止</li><li>如果没有查找到，严格模式下，会抛出 <code>ReferenceError</code> 错误，非严格模式下，会自动在全局作用域下创建此变量</li><li>如果找到了，但是其之前没有被赋值，那么就会返回 <code>undefined</code></li></ul></li></ul><div class="note warning"><p>对象的属性或方法调用也会触发RHS查询</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = a;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = foo(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure><p>上面代码解析过程如下：</p><ol><li>编译器对上面字符串进行分词、语法分析，然后生成代码</li><li>JS引擎联合作用域开始执行代码<ol><li><code>c</code> 需要被赋值，会触发一次LHS查询，然后需要使用 <code>foo(2)</code> 这个变量的值，这里会触发一次RHS查询</li><li><code>foo(2)</code> 调用过程中，参数赋值会隐式地触发一次 <code>a = 2</code> 的赋值操作，触发一次LHS查询</li><li>进入函数体，<code>var b = a;</code> <code>b</code> 需要被赋值，会触发一次LHS查询，然后需要使用 <code>a</code> 这个变量，这里会触发一次RHS查询，获取值</li><li><code>return a + b;</code> ，这里需要分别获取 <code>a</code> 和 <code>b</code> 这两个变量的值，所以会各自触发一次RHS查询，自此这一步，引擎共计进行了3次LHS查询，4次RHS查询</li></ol></li></ol><p><strong>作用域异常</strong></p><ul><li><code>ReferenceError</code>：作用域判别失败触发，比如在使用变量的时候未找到此变量的创建</li><li><code>TypeError</code>：作用域判别成功了，但是对结果的操作是非法或不合理<ul><li>引用 <code>null</code> 或 <code>undefined</code> 类型值中的属性</li><li>对一个非函数类型的值进行函数调用</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span>.a); <span class="comment">// Uncaught TypeError: Cannot read property 'a' of null</span></span><br><span class="line"><span class="built_in">console</span>.log(b()); <span class="comment">// Uncaught TypeError: b is not a function</span></span><br></pre></td></tr></table></figure><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><h3 id="函数作用域和块作用域"><a href="#函数作用域和块作用域" class="headerlink" title="函数作用域和块作用域"></a>函数作用域和块作用域</h3><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><h3 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h3><h2 id="This和对象原型"><a href="#This和对象原型" class="headerlink" title="This和对象原型"></a>This和对象原型</h2><!-- rebuild by neat -->]]></content>
      <categories>
        <category>书籍</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>读《启示录-打造用户喜爱的产品》</title>
    <url>/archives/f9d474c3.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录阅读《启示录-打造用户喜爱的产品》一书的重点笔记。</p><a id="more"></a><p>打造一款成功产品的十条规律：</p><ol><li><p>产品经理的任务是探索产品的价值、可用性、可行性。</p></li><li><p>探索（定义）产品需要产品经理、交互设计师、软件架构师的通力合作。</p></li><li><p>开发人眼不擅长用户体验设计，因为开发人员脑子里想的是实现模型，而用户看重的是产品的概念模型。</p></li><li><p>用户体验设计就是交互设计、视觉设计。</p></li><li><p>功能（产品需求）和用户体验设计密不可分。</p></li><li><p>产品创意必须尽早的、反复的接受目标用户的试用，以便获取有效的用户体验。</p></li><li><p>为了验证产品的价值和可用性，必须尽早的、反复的请目标用户测试产品创意。</p></li><li><p>采用高保真的产品原型是全体团队成员了解用户需求和用户体验最有效的途径。</p></li><li><p>产品经理的目标是在最短的时间内把握复杂的市场、用户需求，确定产品的基本要求-价值、可用性、可行性。</p></li><li><p>一旦认定产品符合以上基本要求，它就是一个完整的概念，去掉任何因素，都不可能达到预期结果。</p></li></ol><h2 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h2><p>人员是指负责定义和开发产品的团队成员的角色和职责。</p><h3 id="界定产品经理和产品营销人员的职责"><a href="#界定产品经理和产品营销人员的职责" class="headerlink" title="界定产品经理和产品营销人员的职责"></a>界定产品经理和产品营销人员的职责</h3><ul><li>产品经理负责详细定义待开发的产品，让真实的用户测试产品</li><li>产品营销负责向外宣传和推广产品，负责产品发布，为扩展市场销售渠道、组织营销活动、醋精产品销售提供服务</li><li>营销人员是产品经理获取产品需求的重要来源，产品经理是营销人眼获取市场营销信息的重要来源</li></ul><h3 id="界定产品管理和项目管理"><a href="#界定产品管理和项目管理" class="headerlink" title="界定产品管理和项目管理"></a>界定产品管理和项目管理</h3><ul><li>产品管理的职责是探索（定义）有价值的、可用的、可行的产品</li><li>项目管理则关注如何执行计划以按期交付产品</li></ul><h3 id="优秀项目经理的七个特点"><a href="#优秀项目经理的七个特点" class="headerlink" title="优秀项目经理的七个特点"></a>优秀项目经理的七个特点</h3><ul><li>工作紧迫感。可以传递给大家工作的积极性和高效性。</li><li>善于捕捉问题。迅速的、准确的指出问题要害，改善会议效果。</li><li>思路清晰。需要排除排期冲突，日程中断等因素，专注执行时间和效率。</li><li>用数据说话。懂得利用数据识别项目方向，确认项目进度，改善开发流程。</li><li>果断。及时向团队收集数据和建议，适时向上级汇报，帮助大家有问题利用数据做出决策。</li><li>判断力。何时催促进度，何时向上级汇报，何时收集更多信息。</li><li>态度。不能为可行性、资源不足，时间不够，资金匮乏等找借口，必须自己克服。</li></ul><h3 id="产品经理与软件开发"><a href="#产品经理与软件开发" class="headerlink" title="产品经理与软件开发"></a>产品经理与软件开发</h3><ul><li>只有与开发团结融洽合作，才有可能开发出合格的产品</li><li>形成合作关系的关键是双方承认平等-任何一方不从属于另一方</li><li>开发可以帮助产品经理完善产品定义，因为开发最清楚产品设计的可行性</li><li>开发帮助产品经理完善产品定义的3种方式<ul><li>让开发人员直接面对用户或顾客，比如要求开发人员参加产品原型测试</li><li>项开发人员了解最新的技术发展动向，讨论哪些新技术可以应用于产品</li><li>在产品的初期阶段，让开发参与产品评估，协助策划方案</li></ul></li><li>产品经理配合开发人员的3条建议<ul><li>只定义满足基本要求的产品，然后更多的与开发之间形成良好的互动</li><li>一旦进入开发阶段，尽可能避免修改产品的需求</li><li>开发阶段如果遇到诸多问题，比如，用例丢失，设计缺陷等，应迅速在维持产品基本功能，尽量避免修改的原则上，拿出解决方案</li></ul></li><li>与开发团结合作应该遵循的规则：预留余量（20%）的自主时间。在产品管理上为开发团队预留20%的自主时间，让他们自由支配。开发团结可以利用这些时间重写代码、完善架构、重构代码库中有缺陷的部分，提高系统性能，避免“需要停下来重写代码”的情形发生。</li></ul><h3 id="产品经理必须成长的技能"><a href="#产品经理必须成长的技能" class="headerlink" title="产品经理必须成长的技能"></a>产品经理必须成长的技能</h3><ul><li>时间管理。熟练，迅速的区分重要任务和紧急任务，合理的规划和安排时间</li><li>对产品的热情。如果是你，你打算怎样完善自己最喜欢的产品</li><li>运用技术的能力。多学习和理解技术，并适时运用于产品当中</li><li>沟通技能。头口表达和书面表达。条理清晰，言简意赅。演讲推荐：《演讲致胜：讲故事的一书》</li><li>商业知识面。技术讨论、成本结构、边际效应、市场份额、产品定位和品牌等</li><li>学习思路：研发产品之前，需要学习哪些知识，需要多长时间，如何利用这些知识</li></ul><h3 id="产品总监"><a href="#产品总监" class="headerlink" title="产品总监"></a>产品总监</h3><ul><li>建设产品团队。注意要雇佣比自己聪明的人，团队成员的出色表现就是自己的出色表现</li><li>规划公司的产品战略。产品总监要负责制定产品组合路线图，兼顾用户需求和商业目标，从全局出发制定产品发布计划</li></ul><h3 id="产品经理的目标管理"><a href="#产品经理的目标管理" class="headerlink" title="产品经理的目标管理"></a>产品经理的目标管理</h3><ul><li>永远不要告诉别人怎么做。告诉他们做什么，他们自然会发挥天赋，给你惊喜</li><li>留给用户体验设计师和开发人员的空间越大，他们就越有可能打造出用户喜爱的产品</li></ul><h3 id="管理上司的几条经验"><a href="#管理上司的几条经验" class="headerlink" title="管理上司的几条经验"></a>管理上司的几条经验</h3><ol><li>为项目波动做好准备。提高警惕，记录工作进度。指定项目计划时，预留出时间应对变化和调整，做好“做无用功”的心理准备</li><li>注意沟通的方式和频率。有写人喜欢用邮件、聊天软件或是口头汇报，弄清上司的喜好，对症下药</li><li>会前沟通。组织好会议的诀窍是在正式会议召开前充分沟通，也就是逐一向高管和上司确认你的观点和建议，确保会议取得大家的一致意见，确保会议的高效率性</li><li>多提建议，少谈问题。管理者希望听到解决问题的方法，而不是抱怨。所以在提出问题的同时，并附上你的依据和建议</li><li>向上司借力。把想法告诉上司，让上司向高管传达建议</li><li>充分准备。在思路和计划上的漏洞多做思考做到事无巨细</li><li>多用数据和事实说话。多做准备工作，收集事实和数据，才有说服力</li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>流程是指探索、开发富有创意的产品时，反复应用的步骤和成功的实践经验。</p><h3 id="评估产品机会"><a href="#评估产品机会" class="headerlink" title="评估产品机会"></a>评估产品机会</h3><ol><li>产品要解决什么问题？（产品价值）</li><li>为谁解决这个问题？（目标市场）</li><li>成功的机会有多大？（市场规模）</li><li>怎样判断产品成功与否？（度量指标或收益指标）</li><li>有哪些同类产品？（竞争格局）</li><li>为什么我们适合做这个产品？（竞争优势）</li><li>时机合适吗？（市场时机）</li><li>如何把产品推向市场？（营销组合策略）</li><li>成功的必要条件是什么？（解决方案要满足的条件）</li><li>根据以上问题，给出评估结论。（继续或放弃）</li></ol><h3 id="软件项目的两个阶段"><a href="#软件项目的两个阶段" class="headerlink" title="软件项目的两个阶段"></a>软件项目的两个阶段</h3><ol><li>探索产品。弄清楚要开发什么产品，定义正确的产品。重心在分析各种创意，收集用户需求，运用新技术等</li><li>执行产品。开发该产品，正确的开发产品。重心在于执行-开发、测试、发布</li></ol><p>采用流水线方式并行开发产品。也就是说，一旦1.0版本的产品进入项目执行阶段，就开始定义2.0版本的产品。一旦前一个版本进入开发阶段，就把创造的热情投入到下一个版本中，这个版本可以收集上一个版本的问题，遗漏或建议等</p><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><p>产品是指富有创意的产品具有的鲜明特征。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>书籍</category>
        <category>产品</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo特色语法</title>
    <url>/archives/5d6bbf47.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>这是一篇关于hexo一些进阶写法的样式文章。</p><a id="more"></a><h3 id="文本居中引用"><a href="#文本居中引用" class="headerlink" title="文本居中引用"></a>文本居中引用</h3><blockquote class="blockquote-center"><p>预测未来的最好方式是创造未来</p></blockquote><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="普通-markdown-写法"><a href="#普通-markdown-写法" class="headerlink" title="普通 markdown 写法"></a>普通 markdown 写法</h4><blockquote><p>I’am Devin.</p><p>I like coding.</p></blockquote><h4 id="hexo-写法"><a href="#hexo-写法" class="headerlink" title="hexo 写法"></a>hexo 写法</h4><blockquote><p>I’am Devin. I like coding.</p></blockquote><h4 id="hexo-作者引用"><a href="#hexo-作者引用" class="headerlink" title="hexo 作者引用"></a>hexo 作者引用</h4><blockquote><p>I’am Devin. I like coding.</p><footer><strong>—Devin</strong></footer></blockquote><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><div class="note default"><p>default 提示块标签</p></div><div class="note primary"><p>primary 提示块标签</p></div><div class="note success"><p>success 提示块标签</p></div><div class="note info"><p>info 提示块标签</p></div><div class="note warning"><p>warning 提示块标签</p></div><div class="note danger"><p>danger 提示块标签</p></div><h4 id="不携带icon"><a href="#不携带icon" class="headerlink" title="不携带icon"></a>不携带icon</h4><div class="note warning no-icon"><p>warning 提示块标签</p></div><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><span class="label default">默认</span> <span class="label primary">主要</span> <span class="label success">成功</span> <span class="label info">信息</span> <span class="label warning">警告</span> <span class="label danger">危险</span> <span class="label success">这是成功的信息</span><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><a class="btn" href="https://20202030.cc/" title="这是子俊的私人领域"><i class="fa fa-home fa-fw"></i>首页 </a><a class="btn" href="https://20202030.cc/" title="豆瓣电影"><i class="fa fa-film fa-fw"></i>观影 </a><a class="btn" href="https://20202030.cc/" title="豆瓣读书"><i class="fa fa-book fa-fw"></i>阅读</a><h3 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h3><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">A</a></li><li class="tab"><a href="#tab-2">B</a></li><li class="tab"><a href="#tab-3">C</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><p><strong>选项卡 A</strong></p></div><div class="tab-pane" id="tab-2"><p><strong>选项卡 B</strong></p></div><div class="tab-pane" id="tab-3"><p><strong>选项卡 C</strong> 名字为C</p></div></div></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>文档</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Docsify</title>
    <url>/archives/2eeac462.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录Docsify的基本使用。</p><a id="more"></a><h2 id="官方及文档"><a href="#官方及文档" class="headerlink" title="官方及文档"></a>官方及文档</h2><ul><li>官方地址：<a href="https://docsify.js.org/#/" target="_blank" rel="noopener external nofollow noreferrer">https://docsify.js.org/#/</a></li><li>推荐教程：<a href="https://segmentfault.com/a/1190000017576714" target="_blank" rel="noopener external nofollow noreferrer">https://segmentfault.com/a/1190000017576714</a></li></ul><h2 id="Dosify特性"><a href="#Dosify特性" class="headerlink" title="Dosify特性"></a>Dosify特性</h2><ul><li>无需构建，写完文档直接发布</li><li>容易使用并且轻量（~19kb gzipped）</li><li>智能的全文搜索</li><li>提供多套主题</li><li>丰富的 API</li><li>支持 Emoji</li><li>兼容 IE10+</li><li>支持 PWA</li><li>支持 SSR</li></ul><h2 id="Docsify-本地运行"><a href="#Docsify-本地运行" class="headerlink" title="Docsify 本地运行"></a>Docsify 本地运行</h2><p>使用 <code>docsify-cli</code> 来进行本地开发。具体步骤如下：</p><ol><li><code>npm i docsify-cli -g</code> , 全局安装 doscify 脚手架工具</li><li><code>mkdir weblog</code> , 寻找本地磁盘，新建项目目录</li><li><code>cd weblog</code> , 进入项目目录文件中</li><li><code>docsify init ./docs</code> , 初始化一个项目，会生成一些文件</li><li><code>docsify serve ./</code> ， 本地启动服务，即可及时刷新预览</li></ol><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><ol><li>编辑 <code>index.html</code> 中 <code>window.$docsify</code> 的 <code>coverpage</code> 参数，和创建 <code>_coverpage.md</code> 文件即可展示封面。</li><li>替换 <code>index.html</code> 中 的 <code>css</code> 样式，即可改变主题。</li><li>编辑 <code>index.html</code> 中 <code>window.$docsify</code> 的 <code>loadSidebar</code> 参数，和创建 <code>_sizebar.md</code> 文件即可自定义菜单栏。</li><li>github设置中，开启 <code>GitHub Pages</code> 功能并选择 <code>master branch / docs folder</code> 选项。</li></ol><h2 id="特殊的渲染语法"><a href="#特殊的渲染语法" class="headerlink" title="特殊的渲染语法"></a>特殊的渲染语法</h2><ol><li><p><code>!&gt; Time is money!</code>: 重要内容</p></li><li><p><code>?&gt; You are my friend</code>: 普通提示</p></li><li><p><code>[link](/demo &#39;:target=_blank&#39;)</code>: 设置超链接的打开方式（<code>_black/_self</code>）</p></li><li><p><code>[link](/demo &#39;:disaled&#39;)</code>: 超链接禁止点击</p></li><li><p><code>![image](url &#39;:size=50%&#39;)</code>: 图片显示大小（<code>&#39;:size=50x100&#39;/&#39;:size=100&#39;/&#39;:size=20%&#39;</code>）</p></li><li><p>隐藏/展开详情</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span>展示文章<span class="xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span></span><br><span class="line">这是隐藏的内容    </span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>文档</category>
        <category>Docsify</category>
      </categories>
      <tags>
        <tag>Docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>Github使用Netlify加速</title>
    <url>/archives/ec0de0bc.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录github访问加速和账户验证。</p><a id="more"></a><h2 id="github访问加速"><a href="#github访问加速" class="headerlink" title="github访问加速"></a>github访问加速</h2><ol><li>打开 <a href="https://zijunwork.github.io/weblog/#/" target="_blank" rel="noopener external nofollow noreferrer">Netlify</a> 官网 -&gt; [注册] -&gt; 关联 GitHub 登录 -&gt; [New site from Git] -&gt; 选择GitHub</li><li>进入Github的认证授权页面，点击 <code>Authorize Netlify by Netlify</code></li><li>点击 <code>All repositories</code> 直接选择授权所有仓库，这个授权在设置中可以改</li><li>选择一个项目 如果是 docsify 项目，选择 <code>Base directory</code> 为 <code>/docs</code> 点击 [Deploy site] 发布即可</li><li>部署完成后，Netlify会自动生成一个随机的二级域名 <code>xxx.netlify.com</code>，点击[Site Settings]可以修改为自定义的二级域名</li><li>Site details下点击[Change site name]，可以为这个站点设置一个自定义的名字</li></ol><h2 id="账户验证"><a href="#账户验证" class="headerlink" title="账户验证"></a>账户验证</h2><ol><li><p>Basic 验证</p><p>填写对应的用户名和密码即可验证。</p></li><li><p>OAuth 验证，e.g. SourceTee验证用户方式之一</p><p>[github] -&gt; [Settings] -&gt; [Developer settings] -&gt; [OAuth Apps] 应用的名称随便填，主页 URL 填写<code>http://localhost:8080</code>，跳转网址填写 <code>http://localhost:8080/oauth/redirect</code>。</p></li><li><p>Token 验证，e.g. Webstorm 登录github方式之一</p><p>[github] -&gt; [Settings] -&gt; [Developer settings] -&gt; [Personal access tokens] 生成新的token，用token登录即可。</p></li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo踩坑</title>
    <url>/archives/7c55949b.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>主要记录hexo使用过程中的一些Bug，Hexo的踩坑之路。</p><a id="more"></a><h3 id="本地预览ok，部署有问题"><a href="#本地预览ok，部署有问题" class="headerlink" title="本地预览ok，部署有问题"></a>本地预览ok，部署有问题</h3><ul><li><p>Bug描述：</p><p>部署生产，标签文章打开出现 404，但是，本地预览 无此问题。</p></li></ul><ul><li><p>Bug解决：</p><p>出现的问题的原因是：git中设置了大小写不敏感。所以，可以修改 git 设置不忽略大小写。进入项目文件夹，进入 <code>git</code> 目录：<code>.deploy_git</code> , 修改 <code>.git</code> 文件中的配置文件 <code>config</code> , 修改 <code>ignorecase</code> 属性：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ignorecase = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="404页面错误"><a href="#404页面错误" class="headerlink" title="404页面错误"></a>404页面错误</h3><ul><li><p>Bug描述：</p><p>生产环境，404显示不正确，渲染成了post页面，而不是需要的页面。</p></li><li><p>Bug解决：</p><p>在 <code>source</code> 目录下新建 <code>404.html</code> 文件，写入以下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span> <span class="attr">homePageName</span>=<span class="string">"返回"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在主题配置文件中修改 <code>menu</code> 属性：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="attr">commonweal:</span> <span class="string">/404</span> <span class="string">||</span> <span class="string">heartbeat</span></span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>文档</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>Git生成SSH</title>
    <url>/archives/64992bff.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录Git的安装，常用命令，生成SSH密钥等。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载地址：<a href="http://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener external nofollow noreferrer">git-for-windows镜像</a></p><h2 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h2><p>查看用户名：<code>git config user.name</code></p><p>查看用户邮箱：<code>git config user.email</code></p><h2 id="修改提交信息"><a href="#修改提交信息" class="headerlink" title="修改提交信息"></a>修改提交信息</h2><p>修改用户名：<code>git config --global user.name “Zi Jun”</code></p><p>修改邮箱：<code>git config --global user.email “zijun2030@163.com”</code></p><h2 id="检查是否已经存在SSH密钥"><a href="#检查是否已经存在SSH密钥" class="headerlink" title="检查是否已经存在SSH密钥"></a>检查是否已经存在SSH密钥</h2><p><code>cd ~/.ssh</code> 如果能进入说明已经存在</p><h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h2><p><code>ssh-keygen -t rsa -C “zijun2030@163.com”</code> 按3个回车键，密码为空</p><p>文件存放位置 <code>~/.ssh</code>,如果是window的话，Administrator用户，位置：<code>C:\User\Administrator.ssh</code> 下面，如果是其他用户，需要换成对应的用户</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Sourcetree使用</title>
    <url>/archives/f0db4be8.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录Sourcetree的基本使用及常见踩坑问题。</p><a id="more"></a><h2 id="安装跳过注册安装"><a href="#安装跳过注册安装" class="headerlink" title="安装跳过注册安装"></a>安装跳过注册安装</h2><ol><li><p>安装SrouceTree，下载地址: <a href="https://www.sourcetreeapp.com/，执行到选择bitbucket的界面退出" target="_blank" rel="noopener external nofollow noreferrer">https://www.sourcetreeapp.com/，执行到选择bitbucket的界面退出</a></p></li><li><p>到 <code>C:\Users\{用户名}\AppData\Local\Atlassian\SourceTree\</code> 这个路径下创建 <code>accounts.json</code>,并写入以下代码</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"$id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"$type"</span>: <span class="string">"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity"</span>,</span><br><span class="line">    <span class="attr">"Authenticate"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"HostInstance"</span>: &#123;</span><br><span class="line">      <span class="attr">"$id"</span>: <span class="string">"2"</span>,</span><br><span class="line">      <span class="attr">"$type"</span>: <span class="string">"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount"</span>,</span><br><span class="line">      <span class="attr">"Host"</span>: &#123;</span><br><span class="line">        <span class="attr">"$id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"$type"</span>: <span class="string">"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount"</span>,</span><br><span class="line">        <span class="attr">"Id"</span>: <span class="string">"atlassian account"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"BaseUrl"</span>: <span class="string">"https://id.atlassian.com/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Credentials"</span>: &#123;</span><br><span class="line">      <span class="attr">"$id"</span>: <span class="string">"4"</span>,</span><br><span class="line">      <span class="attr">"$type"</span>: <span class="string">"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account"</span>,</span><br><span class="line">      <span class="attr">"Username"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"Email"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"IsDefault"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">]Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>打开 <code>SourceTree.exe_Url_iayhtc13zv3obzuz5vchezjs1az2q5ef</code> (该目录与版本有关，可能不一致)，进入 <code>user.config</code> 文件，增加以下代码</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;setting name="AgreedToEULA" serializeAs="String"&gt;</span><br><span class="line">    &lt;value&gt;True&lt;/value&gt;</span><br><span class="line">&lt;/setting&gt;</span><br><span class="line">&lt;setting name="AgreedToEULAVersion" serializeAs="String"&gt;</span><br><span class="line">    &lt;value&gt;20160201&lt;/value&gt;</span><br><span class="line">&lt;/setting&gt;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>重新点击 SourceTree.exe 安装，弹框选择最后一项 [我不想使用Mercuial] 即可</p></li></ol><h2 id="设置-SSH"><a href="#设置-SSH" class="headerlink" title="设置 SSH"></a>设置 SSH</h2><ol><li>[工具] -&gt; [选项] -&gt; [SSH客户端配置]<ol><li>[SSH客户端] 选择 [OpenSSH]</li><li>[SSH密钥] 选择本地的 <code>id_rsa</code> 私钥文件（Git章节有详细教程）</li></ol></li><li>添加公钥到服务器，以GitHub为例：<ol><li>[github] -&gt; [Settings] -&gt; [SSH and GPG keys] -&gt; [New SSH key] 添加 <code>~/.ssh/id_rsa.pub</code> 文件内容到里面</li></ol></li></ol><h2 id="账户验证"><a href="#账户验证" class="headerlink" title="账户验证"></a>账户验证</h2><ol><li><p>Basic 验证</p><p>填写对应的用户名和密码即可验证</p></li><li><p>OAuth 验证</p><p>[github] -&gt; [Settings] -&gt; [Developer settings] -&gt; [OAuth Apps] 应用的名称随便填，主页 URL 填写<code>http://localhost:8080</code>，跳转网址填写 <code>http://localhost:8080/oauth/redirect</code></p></li></ol><h2 id="解决gitflow无法正常使用"><a href="#解决gitflow无法正常使用" class="headerlink" title="解决gitflow无法正常使用"></a>解决gitflow无法正常使用</h2><ol><li><p>点击 设置 -&gt; 编辑配置文件</p></li><li><p>修改配置选项：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[gitflow <span class="string">"prefix"</span>]</span><br><span class="line">    feature = feature/</span><br><span class="line">    bugfix = bugfix/</span><br><span class="line">    release = release/</span><br><span class="line">    hotfix = hotfix/</span><br><span class="line">    support = support/</span><br><span class="line">    versiontag =</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Git</category>
        <category>Sourcetree</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Sourcetree</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的严格模式</title>
    <url>/archives/fb69cc5d.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录JavaScript严格模式的详解。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>除了正常运行模式，ECMAscript5 中添加了第二种运行模式：“严格模式”（strict mode）。顾名思义，<code>这种模式要求JavaScript</code> 在更严格的模式中运行。</p><p>设立“严格模式”的目的，主要有以下几个原因：</p><ul><li>消除 <code>JavaScript</code> 语法的一些不合理，不严谨之处，减少一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>提高编译效率，增加运行速度</li></ul><p>e.g. 浏览器中 <code>F12</code> 键进入调试模式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x = <span class="number">3.14</span>; <span class="comment">// 不会报错，正常</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"user strict"</span></span><br><span class="line">y = <span class="number">6.18</span>; <span class="comment">// Uncaught ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure><h2 id="进入标志"><a href="#进入标志" class="headerlink" title="进入标志"></a>进入标志</h2><p>进入“严格模式”的标志，是 <code>&quot;use strict&quot;;</code>。老版本的浏览器会把它当做一行普通的字符串，会忽略。</p><h2 id="如何调用"><a href="#如何调用" class="headerlink" title="如何调用"></a>如何调用</h2><p>“严格模式”有两种调用方式</p><ol><li><p>针对整个脚本文件</p><p>需要将 <code>&quot;use strict&quot;;</code> 放在脚本文件的第一行。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">    "use strict"</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 以下代码为 严格模式</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 以下代码为 正常模式</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>针对单个函数</p><p>需要将 <code>&quot;use strict&quot;;</code> 放在函数体的第一行。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="string">"user strict"</span>;</span><br><span class="line">    <span class="comment">// 以下代码为 严格模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noStrict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 以下代码为 正常模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="严格模式的限制"><a href="#严格模式的限制" class="headerlink" title="严格模式的限制"></a>严格模式的限制</h2><ul><li><p>不允许使用未声明的变量</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">a = <span class="number">1</span>; <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;&#125; <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>不允许删除变量或对象，只有 <code>configurable</code> 设置为 <code>true</code> 的对象属性，才能被删除</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> a; <span class="comment">// Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">delete</span> b.x; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><div class="note warning no-icon"><p>为什么 <code>var</code> / <code>let</code> / <code>const</code> 声明的变量无法删除？<br></p><p>在正常模式，变量或对象执行 <code>delete</code> 不会报错，但是删除操作不会成功。比如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span> c;</span><br><span class="line"><span class="keyword">delete</span> d;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure><p><strong>究其原因，是因为用不管是在正常模式还是“严格模式”下，<code>var</code> 声明的变量，其属性是 <code>configuarable = false</code>，所以不能删除</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">window</span>, <span class="string">'a'</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    configurable: false,</span></span><br><span class="line"><span class="comment">    enumerable: true,</span></span><br><span class="line"><span class="comment">    value: 1,</span></span><br><span class="line"><span class="comment">    writable: true</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>更多的 对象属性，可查看<a href="/archives/27b30017.html">《JavaScript进阶-对象属性》</a></p></div></li><li><p>不允许删除函数</p></li><li><p>不允许变量重名</p></li><li><p>不允许使用八进制</p></li><li><p>不允许使用转义字符</p></li><li><p>不允许对只读属性赋值</p></li><li><p>不允许对一个使用getter方法读取的属性进行赋值</p></li><li><p>不允许删除一个不允许删除的属性</p></li><li><p>变量名不能使用 <code>eval</code> 字符串</p></li><li><p>变量名不能使用 <code>arguments</code> 字符串</p></li><li><p>在作用域 <code>eval()</code> 创建的变量不能被调用</p></li><li><p>禁止 <code>this</code> 关键字指向全局对象</p></li><li><p>保留关键字（<code>implements</code>、<code>interface</code>、<code>let</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>static</code>、<code>yield</code>）</p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript进阶-对象属性</title>
    <url>/archives/27b30017.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要详细记录JavaScript中的对象属性：命名属性、数据属性、访问器属性、内部属性。</p><a id="more"></a><h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><h3 id="对象属性类型"><a href="#对象属性类型" class="headerlink" title="对象属性类型"></a>对象属性类型</h3><ul><li>命名属性 - 可直接通过 <code>.</code> 访问到的属性</li><li>数据属性 - 专门保存一个值的属性</li><li>访问器属性 - 保护数据属性的特殊属性，不实际存储数据</li><li>内部属性 - 不能通过 <code>.</code> 直接访问的属性，比如 <code>class</code>、<code>__proto__</code></li></ul><h3 id="涉及的属性方法"><a href="#涉及的属性方法" class="headerlink" title="涉及的属性方法"></a>涉及的属性方法</h3><ul><li><code>Object.getOwnPropertyDescriptor(obj, &quot;属性名&quot;)</code>：获取指定属性的描述（必须是自有属性，不适用于原型链的属性）</li><li><code>Object.defineProperty(obj, &quot;属性名&quot;, {特性})</code>：在指定对象上添加新属性或修改属性，如果是新增且为指定特性，则会将数据属性的默认值全部设为 <code>false</code></li></ul><h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><p>数据属性的4大特性</p><ul><li><code>configuable</code>：是否可配置，表示能否通过 <code>delete</code> 删除属性，默认为 <code>true</code></li><li><code>enumerable</code>： 是否可枚举，表示能够通过 <code>for-in</code> 循环返回属性，默认为 <code>true</code></li><li><code>value</code>：包含这个属性的数据值</li><li><code>writable</code>：是否可读写，表示能否修改属性的值，默认为 <code>true</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">'zi jun'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">"name"</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	configurable: true,</span></span><br><span class="line"><span class="comment">	enumberable: true,</span></span><br><span class="line"><span class="comment">	value: "zi jun",</span></span><br><span class="line"><span class="comment">	writable: true</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">"name"</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	configurable: true,</span></span><br><span class="line"><span class="comment">	enumberable: true,</span></span><br><span class="line"><span class="comment">	value: "zi jun",</span></span><br><span class="line"><span class="comment">	writable: false</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><div class="note warning"><p>在正常模式下，<code>delete</code> 一个 <code>configurable</code> 为 <code>false</code> 的变量或对象，不会报错，只是会删除不成功。而在“严格模式”下，则会报错。</p></div><div class="note warning no-icon"><p>针对变量对象，在“严格模式”下：</p><ul><li><p>如果是用 <code>var</code> 声明的，可以理解为在 <code>window</code> 对象上定义了这个属性，可以利用 <code>Object.getOwnPropertyDescriptor(obj, &quot;属性名&quot;)</code> 查看可配置特性，查看是否可删除。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">window</span>, <span class="string">'a'</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    configurable: false,</span></span><br><span class="line"><span class="comment">    enumerable: true,</span></span><br><span class="line"><span class="comment">    value: 1,</span></span><br><span class="line"><span class="comment">    writable: true</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure></li><li><p>如果是用ES6+的 <code>let</code> / <code>const</code> 声明的，不能删除，如何理解？</p></li></ul></div><h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><p>访问器属性的4大特性</p><ul><li><code>get</code>：函数或 <code>undefined</code>，在取属性值时被调用 <code>getter</code> 访问器</li><li><code>set</code>：函数或 <code>undefined</code>，在设置属性值时被调用 <code>setter</code> 访问器</li><li><code>enumerable</code>：是否可枚举，表示能够通过 <code>for-in</code> 循环返回属性，默认为 <code>true``value</code>：包含这个属性的数据值</li><li><code>configuable</code>：是否可配置，表示能否通过 <code>delete</code> 删除属性，默认为 <code>true</code></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    _name: <span class="string">'zi jun'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">    <span class="keyword">set</span>: function(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = <span class="string">"new name: "</span> + value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"My name is "</span> + <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person._name); <span class="comment">// =&gt; "zi jun"</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// =&gt; "My name is zi jun"</span></span><br><span class="line">person.name = <span class="string">"Devin"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// =&gt; My name is new name: Devin</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Live-Server本地静态服务</title>
    <url>/archives/eb7f8542.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录本地服务的开启，live-server的使用，类似有anywhere。</p><a id="more"></a><h2 id="开启本地静态服务"><a href="#开启本地静态服务" class="headerlink" title="开启本地静态服务"></a>开启本地静态服务</h2><ol><li><code>npm install live-server -g</code> ， 全局安装 <code>live-server</code></li><li>cmd键入到要启动静态服务的目录</li><li><code>live-server</code> 或者 <code>live-server --port=7876</code> 启动静态服务</li></ol><div class="note info"><p>live-server 对比 anywhere ：live-serve 支持热更新，而anywhere则需要手动刷新。</p></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>live-server</tag>
        <tag>静态服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Anywhere本地静态服务</title>
    <url>/archives/f1c4558.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录本地服务的开启，anywhere的使用，类似有live-server。</p><a id="more"></a><h2 id="开启本地静态服务"><a href="#开启本地静态服务" class="headerlink" title="开启本地静态服务"></a>开启本地静态服务</h2><ol><li><code>npm install anywhere -g</code> ， 全局安装 <code>anywhere</code></li><li>cmd键入到要启动静态服务的目录</li><li><code>anywhere</code> 或者 <code>anywhere -p 7890</code> 启动静态服务</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
        <category>Server</category>
      </categories>
      <tags>
        <tag>静态服务</tag>
        <tag>anywhere</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Cmd命令</title>
    <url>/archives/fd31ce3.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本篇主要记录cmd常用的一些命令。</p><a id="more"></a><h2 id="常用Cmd命令"><a href="#常用Cmd命令" class="headerlink" title="常用Cmd命令"></a>常用Cmd命令</h2><ul><li><code>dir</code> 查看当前文件夹下的文件及文件夹</li><li><code>cd</code> 切换目录/文件</li><li><code>cd file</code> 进入当前文件夹下的file文件夹</li><li><code>cd fold1/fold2</code> 或者 <code>cd fold1\fold2</code> 进入多层文件夹</li><li><code>cd ..</code> 进入上一层文件夹</li><li><code>cd ../folder</code> 进入上一层文件夹中的folder文件夹</li><li><code>mkdir myfolder</code> 或 <code>md myfolder</code> 在当前目录下创建myfolder文件夹</li><li><code>type nul &gt; my.txt</code> 创建空白的my.txt文件</li><li><code>echo content &gt; test1.py</code> 创建内容是content的my.txt文件</li><li><code>type test1.py</code> 查看在当前目录下的test1.py文件内容，把内容打印到cmd中</li><li><code>test1.py</code> 直接输入文件名，用默认程序打开此文件（相当于鼠标双击）</li><li><code>ren oldname newname</code> 重命名</li><li><code>del test1.py</code> 删除文件</li><li><code>del myfolder</code> 删除myfolder文件夹中的所有文件（文件夹保留）</li><li><code>rd myfolder</code> 或者 <code>rmdir myfolder</code> 删除myfolder文件夹</li><li><code>tree myfolder</code> 将myfolder文件夹下的所有文件夹展示成树状结构（不展示文件）</li><li><code>tree myfolder /f</code> 展示文件夹及文件树状结构</li><li><code>tree myfolder /f &gt; my.txt</code> 将结果输出到my.txt文件中（新建的文件）</li><li><code>cls</code> 清屏</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Windows</category>
        <category>Cmd</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-7个简单但棘手的JavaScript面试问题</title>
    <url>/archives/9c18ab7c.html</url>
    <content><![CDATA[<!-- build time:Sat May 09 2020 18:44:04 GMT+0800 (GMT+08:00) --><p>本次主要记录：意外全局变量、数组的length属性、鹰眼测试、自动分号插入、经典为题：棘手的闭包、浮点数计算、变量提升这几个问题。</p><a id="more"></a><h3 id="意外全局变量"><a href="#意外全局变量" class="headerlink" title="意外全局变量"></a>意外全局变量</h3><p><strong>问题</strong></p><p>以下代码段中用于运算 <code>typeof a</code> 和 <code>typeof b</code> 的内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = b = <span class="number">0</span>;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="keyword">typeof</span> a;</span><br><span class="line"><span class="keyword">typeof</span> b;</span><br></pre></td></tr></table></figure><details><summary>答案</summary>undefined number<br>这里需要注意的是: <code>let a = b = 0;</code> 和 <code>let a = 0, b = 0;</code> 的区别。<br><ul><li><code>let a = b = 0;</code> 相当于 <code>b = 0;</code> <code>let a = b;</code>。注意, <code>b = 0</code> 的前面是没有 <code>let</code> 声明的,所以这句代码就相当于 <code>window.b = 0;</code>,所以, <code>b</code> 就是一个全局变量。以上代码在浏览器中执行的详情如下：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="built_in">window</span>.b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">window</span>.b;</span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>let a = 0, b = 0;</code> 相当于 <code>let a = 0; let b = 0;</code>。</li></ul></details><h3 id="数组的length属性"><a href="#数组的length属性" class="headerlink" title="数组的length属性"></a>数组的length属性</h3><p><strong>问题</strong></p><p>以下代码中<code>clothes[0]</code> 的值是什么？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clothes = [<span class="string">'jacket'</span>, <span class="string">'t-shirt'</span>];</span><br><span class="line">clothes.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(clothes[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><details><summary>答案</summary>undefined<br>数组对象的 `length` 属性具有特殊的行为：减少length属性的值就是删除自己的数组元素。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">clothes.length = <span class="number">0</span>; <span class="comment">// &lt;=&gt; clothes = [];</span></span><br></pre></td></tr></table></figure></details><h3 id="鹰眼测试"><a href="#鹰眼测试" class="headerlink" title="鹰眼测试"></a>鹰眼测试</h3><p><strong>问题</strong></p><p><code>numbers</code> 数组的内容是什么？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> length = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> numbers = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++); &#123;</span><br><span class="line">    numbers.push(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br></pre></td></tr></table></figure><details><summary>答案</summary>5<br>注意分号的位置！以上代码等效于：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> length = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> numbers = [];</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  <span class="comment">// do nothing                    </span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  numbers.push(i + <span class="number">1</span>);                      </span><br><span class="line">&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(numbers);</span><br></pre></td></tr></table></figure></details><h3 id="自动分号插入"><a href="#自动分号插入" class="headerlink" title="自动分号插入"></a>自动分号插入</h3><p><strong>问题</strong></p><p><code>arrayfromValue()</code> 返回什么值？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayFromValue</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  [item];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arrayFromValue[<span class="number">10</span>]);</span><br></pre></td></tr></table></figure><details><summary>答案</summary>undefined<br>注意 <code>return</code> 和 <code>[item]</code> 表达式之间的换行符。此换行符会使JavaScript自动在 <code>return</code> 和 <code>[item]</code> 表达式之间插入分号。以下是等效代码：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayFromValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  [item];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="经典为题：棘手的闭包"><a href="#经典为题：棘手的闭包" class="headerlink" title="经典为题：棘手的闭包"></a>经典为题：棘手的闭包</h3><p><strong>问题</strong></p><p>以下代码将输出什么到控制台？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> log = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">  setTimeout(log, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>答案</summary>3 3 3<br><code>log()</code>是一个捕获变量 <code>i</code>的闭包，此变量在 <code>for()</code> 循环的外部范围中定义。执行此代码有两个阶段。<br>Phase 1:<br>1. <code>for()</code> 重复3次，在每次迭代过程中，都会创建一个新的函数 <code>log()</code> 来捕获变量 <code>i</code>。然后， <code>setTimeout()</code> 计划执行 <code>log()</code>。<br>2. 当 <code>for()</code> 循环完成时，<code>i</code> 变量的值为3。<br>Phase 2:<br>1. 第二阶段发生在100ms之后， <code>setTimeout()</code> 调用了3次计划的 <code>log()</code>。<code>log()</code> 读取变量 <code>i</code>的当前值为3，并记录到控制台。</details><h3 id="浮点数计算"><a href="#浮点数计算" class="headerlink" title="浮点数计算"></a>浮点数计算</h3><p><strong>问题</strong></p><p>这个等式的结果是什么？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><details><summary>答案</summary>false<br>由于以二进制方式对浮点数进行编码，因此像浮点数相加之类的操作会产生舍入误差。简而言之，直接比较浮点数并不精确。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>; <span class="comment">// -&gt; 0.30000000000000004</span></span><br></pre></td></tr></table></figure></details><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p><strong>问题</strong></p><p>如果在声明前访问 <code>myVar</code> 和 <code>myConst</code>，会发生什么情况？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myVar);</span><br><span class="line"><span class="built_in">console</span>.log(myConst);</span><br><span class="line"><span class="keyword">var</span> myVar = <span class="string">"value"</span>;</span><br><span class="line"><span class="keyword">const</span> myConst = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><details><summary>答案</summary>undefined error<br><code>var</code>具有变量提升的属性，所以，在<code>var</code> 声明变量，变量开始初始化为 <code>undefined</code>。</details><!-- rebuild by neat -->]]></content>
      <categories>
        <category>面试</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
